apply plugin: 'com.android.application'

if (rootProject.ext.isRelease == true) {
    apply from: "$project.rootDir/demo-dependencies-release.gradle"
} else {
    apply from: "$project.rootDir/demo-dependencies-debug.gradle"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystores/release.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.jd.sdkceshiandroid"
        minSdkVersion 16
        targetSdkVersion 31

        versionCode rootProject.ext.sdkVersionCode
        versionName rootProject.ext.sdkVersionName

        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' // 设置支持的SO库架构
        }
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['store'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['alias']
            keyPassword keystoreProperties['aliasPassword']
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            // 修改aar名称
            variant.outputs.all { output ->
                outputFileName = "JADYunDemo_" +
                        ((variant.flavorName == "") ? "" : (variant.flavorName + "_")) +
                        android.defaultConfig.versionName + "_" +
                        android.defaultConfig.versionCode + "_" +
                        releaseTime() + ".apk"
            }
            // 复制aar到指定目录
            variant.assembleProvider.configure {
                it.doLast {
                    variant.outputs.all { output ->
                        // 输出目录在：项目目录/build/outputs/aar/日期-gitCommit/
                        def targetPath = [project.rootDir.absolutePath, "demo"].join(File.separator)
                        copy {
                            from output.outputFile
                            into targetPath
                        }
                        println("DEMO已移动到：${targetPath}")
                    }
                }
            }
        }
    }

}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {
    // 移动安全联盟OAID SDK，将下载好的SDK放到demo/libs下。推荐去官网下载使用新版本：http://www.msa-alliance.cn/col.jsp?id=120
    implementation files('libs/oaid_sdk_1.0.23.aar')
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.0.0'
    //noinspection GradleDependency
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //noinspection GradleDependency
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    // third lib, glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    // debug lib, leak canary
//    implementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
}